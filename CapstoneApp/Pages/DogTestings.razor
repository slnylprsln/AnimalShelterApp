@page "/dogTestings/{dogId:int}"
@using CapstoneApp.Models;
@using CapstoneApp.Services.Interfaces;
@inject IDogServices DogService

@if (testings == null)
{
	<p><em>Yükleniyor...</em></p>
}
@if (testings != null)
{
	<div>
		<button class="btn btn-default" onClick="history.back();"><i class="oi oi-arrow-left"></i>              Geri</button>
		<button class="btn btn-default" onClick="window.location.reload();" style="margin-left:1000px"><i class="oi oi-reload"></i>              Sayfayı Yenile</button>
	</div>
	<br />
	<div>
		<button class="btn btn-success" @onclick="AddTesting" style="border:unset; color:aliceblue; width:200px; height:40px">Yeni Test Kaydı Ekle</button>
	</div>
	<br />
	<p>@dog.ChipCode çip kodlu köpeğin olduğu tüm testler (@testings.Count kayıt) görüntüleniyor.</p>
	<table class="table">
		<thead>
			<tr>
				<th style="font-size:14px">Testin ID'si</th>
				<th style="font-size:14px">Testin Adı</th>
				<th style="font-size:14px">Test Olma Tarihi</th>
				<th style="font-size:14px">Test Sonucu</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var testing in testings)
			{
				<tr>
					<td style="font-size:14px">@testing.DogTestingId</td>
					<td style="font-size:14px">@testing.Name</td>
					<td style="font-size:14px">@testing.TestDate</td>
					<td style="font-size:14px">@testing.TestResult</td>

					<td>
						<button class="btn btn-primary" @onclick="(() => EditTesting(testing))"><i class="oi oi-pencil"></i></button>
					</td>
					<td>
						<button class="btn btn-danger" @onclick="(() => DeleteTesting(testing))"><i class="oi oi-circle-x"></i></button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@if (ShowEmptyPage)
{
	<div>
		<button class="btn btn-default" onClick="history.back();"><i class="oi oi-arrow-left"></i>              Geri</button>
		<button class="btn btn-default" onClick="window.location.reload();" style="margin-left:1000px"><i class="oi oi-reload"></i>              Sayfayı Yenile</button>
	</div>
	<br />
	<div>
		<button class="btn btn-success" @onclick="AddTesting" style="border:unset; color:aliceblue; width:200px; height:40px">Yeni Test Kaydı Ekle</button>
	</div>
	<br />
	<p>@dog.ChipCode çip kodlu köpeğin olduğu tüm testler (0 kayıt) görüntüleniyor.</p>
	<table class="table">
		<thead>
			<tr>
				<th style="font-size:14px">Testin Adı</th>
				<th style="font-size:14px">Test Olma Tarihi</th>
				<th style="font-size:14px">Test Sonucu</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
	</table>
}

@if (ShowAddPopup)
{
	<div class="modal" tabindex="-1" style="display:block" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title">Yeni Test Kaydı Ekle</h3>
					<button type="button" class="close"
						@onclick="CloseAddPopup">
						<span aria-hidden="true">X</span>
					</button>
				</div>
				<div class="modal-body">
					<h6 style="font-size:14px">Testin Adı</h6>
					<input class="form-control" type="text" @bind="newDogTesting.Name" />
					<br />
					<h6 style="font-size:14px">Test Olma Tarihi</h6>
					<input class="form-control" type="date" @bind="newDogTesting.TestDate" />
					<br />
					<h6 style="font-size:14px">Test Sonucu</h6>
					<input class="form-control" type="text" @bind="newDogTesting.TestResult" />
					<br />
					<button class="btn btn-success"
						@onclick="SaveTestingAdd">
						Ekle
					</button>&nbsp;
				</div>
			</div>
		</div>
	</div>
}

@if (ShowEditPopup)
{
	<div class="modal" tabindex="-1" style="display:block" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title">Test Kaydını Düzenle</h3>
					<button type="button" class="close"
						@onclick="CloseEditPopup">
						<span aria-hidden="true">X</span>
					</button>
				</div>
				<div class="modal-body">
					<h6 style="font-size:14px">Testin Adı</h6>
					<input class="form-control" type="text" @bind="newDogTesting.Name" />
					<br />
					<h6 style="font-size:14px">Test Olma Tarihi</h6>
					<input class="form-control" type="date" @bind="newDogTesting.TestDate" />
					<br />
					<h6 style="font-size:14px">Test Sonucu</h6>
					<input class="form-control" type="text" @bind="newDogTesting.TestResult" />
					<br />
					<button class="btn btn-success"
						@onclick="SaveTestingEdit">
						Güncelle
					</button>&nbsp;
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int dogId { get; set; }

	private List<DogTesting> testings;
	private DogTesting newDogTesting;
	private DogTesting bf = new DogTesting();
	private Dog dog;
	bool ShowEmptyPage = false;
	bool ShowEditPopup = false;
	bool ShowAddPopup = false;

	protected override async Task OnInitializedAsync()
	{
		testings = await DogService.GetTestings(dogId);
		dog = await DogService.GetDogById(dogId);
		if (testings == null)
		{
			ShowEmptyPage = true;
		}
	}
	void AddTesting()
	{
		newDogTesting = new DogTesting();
		ShowAddPopup = true;
	}
	async void EditTesting(DogTesting dogTesting)
	{
		newDogTesting = dogTesting;
		ShowEditPopup = true;
		bf.Name = newDogTesting.Name;
		bf.DogId = dogId;
		bf.TestDate = newDogTesting.TestDate;
		bf.TestResult = newDogTesting.TestResult;
	}
	void CloseAddPopup()
	{
		// Close the Popup
		ShowAddPopup = false;
	}
	void CloseEditPopup()
	{
		// Close the Popup
		ShowEditPopup = false;
	}
	async void SaveTestingAdd()
	{
		DogTesting vacc = new DogTesting();
		vacc.Name = newDogTesting.Name;
		vacc.TestDate = newDogTesting.TestDate;
		vacc.TestResult = newDogTesting.TestResult;
		vacc.DogId = dogId;
		bool adding = await DogService.AddTesting(vacc);
		if (adding == true)
		{
			await App.Current.MainPage.DisplayAlert("Başarılı", "Test kaydı alındı!", "Ok");
			testings.Add(vacc);
			ShowEmptyPage = false;
			await OnInitializedAsync();
		}
		else
		{
			await App.Current.MainPage.DisplayAlert("Hata", "Kayıt sırasında bir problem meydana geldi!", "Ok");
			await OnInitializedAsync();
		}
	}
	async void SaveTestingEdit()
	{
		bool update = await DogService.EditTesting(newDogTesting);
		if (update == true)
		{
			await App.Current.MainPage.DisplayAlert("Başarılı", "Test kaydı güncellendi!", "Ok");
			await OnInitializedAsync();
		}
		else
		{
			await App.Current.MainPage.DisplayAlert("Hata", "Güncelleme sırasında bir problem meydana geldi!", "Ok");
			await OnInitializedAsync();
		}
	}
	async void DeleteTesting(DogTesting dogTesting)
	{
		bool answer = await App.Current.MainPage.DisplayAlert("", "Test kaydını silmek istediğinizden emin misiniz?", "Evet", "Hayır");
		if (answer == true)
		{
			bool delete = await DogService.DeleteTesting(dogTesting);
			if (delete == true)
			{
				await App.Current.MainPage.DisplayAlert("Başarılı", "Test kaydı silindi! Güncel listeyi görmek için lütfen sayfayı yenileyiniz.", "Ok");
				testings.Remove(dogTesting);
			}
			else
			{
				await App.Current.MainPage.DisplayAlert("Hata", "Silme sırasında bir problem meydana geldi!", "Ok");
				await OnInitializedAsync();
			}
		}
	}
}
