// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CatDbContext))]
    [Migration("20230104183017_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Cat", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BroughtToShelter")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FertilityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OwningDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Pregnancy")
                        .HasColumnType("bit");

                    b.Property<int?>("ShelterId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CatId");

                    b.HasIndex("ShelterId");

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("Entities.CatDiseaseHistory", b =>
                {
                    b.Property<int>("CatDiseaseHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("DiseaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CatDiseaseHistoryId", "CatId");

                    b.HasIndex("CatId");

                    b.ToTable("CatDiseaseHistory");
                });

            modelBuilder.Entity("Entities.CatTesting", b =>
                {
                    b.Property<int>("CatTestingId")
                        .HasColumnType("int");

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatTestingId", "CatId");

                    b.HasIndex("CatId");

                    b.ToTable("CatTesting");
                });

            modelBuilder.Entity("Entities.CatVaccination", b =>
                {
                    b.Property<int>("CatVaccinationId")
                        .HasColumnType("int");

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VaccinationExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CatVaccinationId", "CatId");

                    b.HasIndex("CatId");

                    b.ToTable("CatVaccination");
                });

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.Property<int>("DogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogId"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BroughtToShelter")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FertilityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OwningDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Pregnancy")
                        .HasColumnType("bit");

                    b.Property<int?>("ShelterId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DogId");

                    b.HasIndex("ShelterId");

                    b.ToTable("Dog");
                });

            modelBuilder.Entity("Entities.DogDiseaseHistory", b =>
                {
                    b.Property<int>("DogDiseaseHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogDiseaseHistoryId"));

                    b.Property<string>("DiseaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DogDiseaseHistoryId");

                    b.HasIndex("DogId");

                    b.ToTable("DogDiseaseHistory");
                });

            modelBuilder.Entity("Entities.DogTesting", b =>
                {
                    b.Property<int>("DogTestingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogTestingId"));

                    b.Property<int?>("DogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DogTestingId");

                    b.HasIndex("DogId");

                    b.ToTable("DogTesting");
                });

            modelBuilder.Entity("Entities.DogVaccination", b =>
                {
                    b.Property<int>("DogVaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogVaccinationId"));

                    b.Property<int?>("DogId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VaccinationExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DogVaccinationId");

                    b.HasIndex("DogId");

                    b.ToTable("DogVaccination");
                });

            modelBuilder.Entity("Entities.Shelter", b =>
                {
                    b.Property<int>("ShelterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelterId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatFoodStock")
                        .HasColumnType("int");

                    b.Property<string>("CertificateNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CombinationVaccineStock")
                        .HasColumnType("int");

                    b.Property<int>("DistemperVaccineStock")
                        .HasColumnType("int");

                    b.Property<int>("DogFoodStock")
                        .HasColumnType("int");

                    b.Property<int>("HepatitisVaccineStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParvovirusVaccineStock")
                        .HasColumnType("int");

                    b.Property<int>("RabiesVaccineStock")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ShelterId");

                    b.HasIndex("UserId");

                    b.ToTable("Shelter");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.Cat", b =>
                {
                    b.HasOne("Entities.Shelter", "Shelters")
                        .WithMany("Cats")
                        .HasForeignKey("ShelterId");

                    b.Navigation("Shelters");
                });

            modelBuilder.Entity("Entities.CatDiseaseHistory", b =>
                {
                    b.HasOne("Entities.Cat", "Cat")
                        .WithMany("CatDiseaseHistories")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("Entities.CatTesting", b =>
                {
                    b.HasOne("Entities.Cat", "Cat")
                        .WithMany("CatTestings")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("Entities.CatVaccination", b =>
                {
                    b.HasOne("Entities.Cat", "Cat")
                        .WithMany("CatVaccinations")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.HasOne("Entities.Shelter", "Shelter")
                        .WithMany("Dogs")
                        .HasForeignKey("ShelterId");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("Entities.DogDiseaseHistory", b =>
                {
                    b.HasOne("Entities.Dog", "Dog")
                        .WithMany("DogDiseaseHistories")
                        .HasForeignKey("DogId");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Entities.DogTesting", b =>
                {
                    b.HasOne("Entities.Dog", "Dog")
                        .WithMany("DogTestings")
                        .HasForeignKey("DogId");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Entities.DogVaccination", b =>
                {
                    b.HasOne("Entities.Dog", "Dog")
                        .WithMany("DogVaccinations")
                        .HasForeignKey("DogId");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Entities.Shelter", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Cat", b =>
                {
                    b.Navigation("CatDiseaseHistories");

                    b.Navigation("CatTestings");

                    b.Navigation("CatVaccinations");
                });

            modelBuilder.Entity("Entities.Dog", b =>
                {
                    b.Navigation("DogDiseaseHistories");

                    b.Navigation("DogTestings");

                    b.Navigation("DogVaccinations");
                });

            modelBuilder.Entity("Entities.Shelter", b =>
                {
                    b.Navigation("Cats");

                    b.Navigation("Dogs");
                });
#pragma warning restore 612, 618
        }
    }
}
